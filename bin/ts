#!/usr/bin/env zsh

TS_DATA_FILE_NAME=".ts.data"
TS_DATA_FILE="$HOME/$TS_DATA_FILE_NAME"

function generate_session_name(){
    local name="$1"
    local base="${name%-*}"  # Remove the part after the last dash (if exists)
    local suffix="${name##*-}"  # Extract the part after the last dash

    # Check if the suffix is a number
    if [[ "$suffix" =~ ^[0-9]+$ ]]; then
        local new_suffix=$((suffix + 1))
        echo "${base}-${new_suffix}"
    else
        echo "${name}-1"
    fi
}

function new_tmux_session(){
	local session="$1"
	local dir="$2"
	TMUX="" tmux new-session -d -s "$session" -c "$dir"
}

function attach_tmux_session(){
	local session="$1"
	if [[ -z "$TMUX" ]]; then
	  tmux attach -t "$session"
	else
	  tmux switch-client -t "$session"
	fi
}

function tmux_session(){
	# If the session exists
	local choice="$1"
	local session="$(basename "$choice")"

	tmux has-session -t "$session" 2>/dev/null
	if [ ! "$?" -eq 0 ]; then
		# There is no session with this name, create
		new_tmux_session "$session" "$choice"
	else
		# If there is already a session with this name
		# check if the working directory there is the same
		# as the one that we want
		local session_wd
		session_wd=$(tmux display-message -p -t "$session" "#{session_path}")
		if [ ! "$?" -eq 0 ]; then
			echo "failed to determine session path - skip"
			exit 1
		fi

		if [[ ! "$session_wd" -ef "$choice" ]]; then
			# The session exists but with different path - create a new session
			session="$(generate_session_name "$session")"
			new_tmux_session "$session" "$choice"
		fi
	fi

	attach_tmux_session "$session"
}

function add(){
	grep -q "$(pwd)" "$TS_DATA_FILE"
	if [ "$?" -eq 0 ]; then
		echo "$(pwd) already exists"
	else
		echo "$(pwd)" >> "$TS_DATA_FILE"
	fi
}

function generate(){
	fd -t d -c never --exact-depth 1 . "$(pwd)" >> "$TS_DATA_FILE"
}

function cleanup(){
	if [ -f "$TS_DATA_FILE" ]; then
		awk '!seen[$0]++' "$TS_DATA_FILE" > "$TMPDIR$TS_DATA_FILE_NAME"
		mv "$TMPDIR$TS_DATA_FILE_NAME" "$TS_DATA_FILE"
	fi
}

function validate(){
	cat ~/.ts.data | xargs -I{} sh -c "[ -d {} ] && (echo {} >> $TMPDIR$TS_DATA_FILE_NAME)"
	mv "$TMPDIR$TS_DATA_FILE_NAME" "$TS_DATA_FILE"
}

function tscore(){
	if [ -f "$TS_DATA_FILE" ]; then
		local choice
		choice="$(cat "$TS_DATA_FILE" | fzf)"
		if [ ! "$?" -eq 0 ]; then
			exit 0
		fi

		tmux_session "$choice"
	fi
}

function zts(){
	if [ ! "$?" -eq 0 ]; then
		echo "failed to generate full path"
		exit 1
	fi

	if [ -e "$HOME/.local/share/zsh/plugins/zsh-z/zsh-z.plugin.zsh" ];
	then
		source ~/.local/share/zsh/plugins/zsh-z/zsh-z.plugin.zsh

		local choice
		choice="$(zshz 2>&1 -e "$1")"
		if [ ! "$?" -eq 0 ]; then
			echo "no directory found - use ts"
			exit 0
		fi
		tmux_session "$choice"
	else
		echo "zsh-z plugin missing"
		exit 1
	fi
}

function helpmsg(){
	echo "Usage: ts [dirname]"
	echo "Flags:"
	printf "  -a, --add     \t Add the current directory to the registry\n"
	printf "  -c, --clean   \t Clean the ts data file\n"
	printf "  -g, --generate\t Add data generated from the CWD to the ts data file\n"
	printf "  -h, --help    \t Print help message\n"
	printf "  -s, --show    \t Show the ts metadata\n"
	printf "  -v, --validate\t Validate the ts data file\n"
}

function main(){
	if [[ "$1" = "-a" || "$1" = "--add" ]];
	then
		add
	elif [[ "$1" = "-c" || "$1" = "--clean" ]];
	then
		cleanup
	elif [[ "$1" = "-g" || "$1" = "--generate" ]];
	then
		generate
	elif [[ "$1" = "-h" || "$1" = "--help" ]];
	then
		helpmsg
	elif [[ "$1" = "-s" || "$1" = "--show" ]];
	then
		if [ -f "$HOME/.ts.data" ];
		then
			cat ~/.ts.data
		fi
	elif [[ "$1" = "-v" || "$1" = "--validate" ]];
	then
		validate
	elif [[ "$1" = "" ]];
	then
		tscore
	else
		zts "$1"
	fi
}

main "$@"

